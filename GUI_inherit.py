# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'GUI1.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import numpy as np
import binaryfile_read_write as wrb
import open3ds as op
import filops as fp
import read_java_bin
import MouseConnect as ms
from PyQt5 import QtCore, QtGui, QtWidgets
import MouseConnect as mouse
from PyQt5.QtWidgets import QDialog, QApplication, QColorDialog,QLineEdit,QAction
from PyQt5.QtGui import QColor
from PyQt5.QtWidgets import QShortcut
from PyQt5.QtGui import  QKeySequence
from PyQt5.QtWidgets import QFileDialog
#from GUI2 import Ui_Form
import pandas as pg
from pyqtgraph import PlotWidget, plot
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.Qt import Qt
from PyQt5 import QtCore, QtGui, QtWidgets
import UFiedlCalculation
from GUI_Function_Part import Ui_Form_bragg, Ui_Form_impurity, Ui_Form_Cut, Ui_Form_linecut
import filops as fp
from matplotlib.figure import Figure
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from PyQt5.QtWidgets import QShortcut
from PyQt5.QtGui import QKeySequence
from PyQt5.QtWidgets import QMainWindow
#from PyQt5.QtWidgets import Q
import fieldops
import javabin
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from subtract_fit import *
import matplotlib.pyplot as plt
from contrast_ratio import Ui_Form_contrast
from Base_Ui import Baseui
from linecut import Ui_Form
class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(805, 709)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.width = 10
        self.height =10
        self.dpi=100
        self.figure= Figure(figsize=(self.width,self.height),dpi=self.dpi)
        self.canvas = FigureCanvas(self.figure)
        self.ax =self.figure.add_subplot(111)
        self.counts = 0
        self.count_bin = 0
        self.color_count = 0
        self.fft_count = 1
        self.canvas.draw()
        #self.graphicsView = QtWidgets.QGraphicsView(self.centralwidget)
        #self.graphicsView.setObjectName("graphicsView")

        self.verticalLayout.addWidget(self.canvas)
        #这两行可以更改
        MainWindow.setCentralWidget(self.centralwidget)

        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 805, 20))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        self.menu_2 = QtWidgets.QMenu(self.menubar)
        self.menu_2.setObjectName("menu_2")
        self.menu_3 = QtWidgets.QMenu(self.menubar)
        self.menu_3.setObjectName("menu_3")
        self.menu_4 = QtWidgets.QMenu(self.menubar)
        self.menu_4.setObjectName("drift_correction")
        self.menu_5 = QtWidgets.QMenu(self.menubar)
        self.menu_5.setObjectName("图形处理")
        self.menu_6 = QtWidgets.QMenu(self.menubar)
        self.menu_6.setObjectName('绘制linecut')

        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionchoose_color = QtWidgets.QAction(MainWindow)
        self.actionchoose_color.setObjectName("actionchoose_color")

        self.actionopen3ds = QtWidgets.QAction(MainWindow)
        self.actionopen3ds.setObjectName("actionopen3ds")
        self.actionopen3ds.setShortcut('Shift+D')
        self.actionopenpythonbin = QtWidgets.QAction(MainWindow)
        self.actionopenpythonbin.setObjectName("actionopenpythonbin")
        self.actionopenpythonbin.setShortcut('Shift+p')

        self.actionopenjavabin = QtWidgets.QAction(MainWindow)
        self.actionopenjavabin.setObjectName("actionopenjavabin")
        self.actionopenjavabin.setShortcut('Shift+j')

        self.actionochooseimpurities = QtWidgets.QAction(MainWindow)
        self.actionochooseimpurities.setObjectName("choose_impurities")
        self.actionoaddmask = QtWidgets.QAction(MainWindow)
        self.actionoaddmask.setObjectName("add_mask")

        self.actionochooseBraggPeak = QtWidgets.QAction(MainWindow)
        self.actionochooseBraggPeak.setObjectName("chooseBraggPeak")
        self.actionoDoingDrfitCorrection=QtWidgets.QAction(MainWindow)
        self.actionoDoingDrfitCorrection.setObjectName("DriftCorrection")

        self.actioncutfigure =QtWidgets.QAction(MainWindow)
        self.actioncutfigure.setObjectName("cutfigure")

        self.actionlincut = QtWidgets.QAction(MainWindow)
        self.actionlincut.setObjectName('select two point')
        self.actiondrawfunction = QtWidgets.QAction(MainWindow)
        self.actiondrawfunction.setObjectName('绘制linecut')


        self.menu.addAction(self.actionopen3ds)
        self.menu.addAction(self.actionopenpythonbin)
        self.menu.addAction(self.actionopenjavabin)

        self.menu_2.addAction(self.actionchoose_color)

        self.menu_3.addAction(self.actionochooseimpurities)
        self.menu_3.addAction(self.actionoaddmask)

        self.menu_4.addAction(self.actionochooseBraggPeak)
        self.menu_4.addAction(self.actionoDoingDrfitCorrection)

        self.menu_5.addAction(self.actioncutfigure)

        self.menu_6.addAction(self.actionlincut)
        self.menu_6.addAction(self.actiondrawfunction)

        self.menubar.addAction(self.menu.menuAction())
        self.menubar.addAction(self.menu_2.menuAction())
        self.menubar.addAction(self.menu_3.menuAction())
        self.menubar.addAction(self.menu_4.menuAction())
        self.menubar.addAction(self.menu_5.menuAction())
        self.menubar.addAction(self.menu_6.menuAction())


        """
        self.cmaplist = ['viridis', 'plasma', 'inferno', 'magma', 'cividis', 'Greys', 'Purples', 'Blues', 'Greens',
                         'Oranges', 'Reds',
                         'YlOrBr', 'YlOrRd', 'OrRd', 'PuRd', 'RdPu', 'BuPu', 'GnBu', 'PuBu', 'YlGnBu', 'PuBuGn', 'BuGn',
                         'YlGn','RdBu']
        """
        self.cmaplist = ['YlOrBr','YlOrBr_r','Blues','Blues_r','binary_r','binary',
                         'autumn','autumn_r','YlOrRd','YlOrRd_r','Reds','Reds',
                         'Purples','Purples_r','copper','copper_r','OrRd','OrRd_r','RdBu',
                         'RdBu_r','coolwarm','coolwarm_r']
        self.cmap = self.cmaplist[self.color_count]
        self.actionchoose_color.triggered.connect(self.choosecolor)
        self.actionopen3ds.triggered.connect(self.open3ds_or_sxm)
        self.actionopenpythonbin.triggered.connect(self.openpythonbinfile)
        self.actionopenjavabin.triggered.connect(self.openjavabinfile)
        self.actionochooseimpurities.triggered.connect(self.choose_impurity)
        self.actionochooseBraggPeak.triggered.connect(self.choose_peak)
        self.actionoDoingDrfitCorrection.triggered.connect(self.driftcorrection)
        self.actioncutfigure.triggered.connect(self.cutfigure)
        self.actionlincut.triggered.connect(self.linecuts)
        self.actiondrawfunction.triggered.connect(self.actiondrawlinefunction)
        #self.shortcut_change_color = QShortcut(QKeySequence(self.tr("Ctrl+Q")),self)
        #self.shortcut_change_color.activated.connect(self.changecolor)
        #self.shortcut_choose_color = QShortcut(QKeySequence('Ctrl+P'),self)
        #self.shortcut_choose_color.activated.connect(self.changecolor)

        #self.shortcut = QShortcut(QKeySequence('Ctrl+Q'),self)
        #self.shortcut.activated.connect(self .changecolor)


        self.shortcut = QShortcut(QKeySequence('F3'),self.centralwidget,self.changecolor)
        self.shortcut_1 = QShortcut(QKeySequence('Ctrl+Q'),self.centralwidget,self.dialog_open)
        self.shortcut_2 = QShortcut(QKeySequence('Ctrl+S'),self.centralwidget,self.savepng)
        self.shortcut_3 = QShortcut(QKeySequence('Ctrl+B'),self.centralwidget,self.savedata_bin)
        #self.shortcut_3 = QShortcut(QKeySequence('F'),self.centralwidget,self.ffts)
        self.shortcut_4 = QShortcut(QKeySequence('F11'),self.centralwidget,self.contrast_ratio)
        self.shortcut_5 = QShortcut(QKeySequence('Ctrl+F'),self.centralwidget,self.fouriertransform)
        self.retranslateUi(MainWindow)

        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def contrast_ratio(self):
        self.max = np.max(self.topo)
        self.min = np.min(self.topo)
        self.median = np.median(self.topo)
        self.windows = Ui_Form_contrast()
        self.windows.slider_emit.connect(self.sliderfunction)
        #self.windows.slider_2_emit.connect(self.slidernumber2)
        self.windows.show()
    def sliderfunction(self,number1,number2):
        self.topomap_draw_2(number1,number2)
    def savepng(self):
        self.counts = self.counts + 1
        self.ax.axis('off')
        self.figure.savefig(self.Newbinpath+'\\'+'topo'+'_'+str(self.counts)+'.eps',dpi=600,format='eps')
        self.figure.savefig(self.Newbinpath+'\\'+'topo'+'_'+str(self.counts)+'.png',dpi=600,format='png')

    def savedata_bin(self):
        """
        self.count_bin = self.count_bin+1
        path = self.Newbinpath +'\\'
        """
        #功能暂时缺失



    def choosecolor(self):
        self.color = QColorDialog.getColor()

    def open3ds_or_sxm(self):
        self.filename, _ = QFileDialog.getOpenFileName(self.centralwidget,'openfile','C:\\data')
        self.Newpath = op.openup(self.filename)
        #javabin.Nanoispy_Open(self.filename)


    def choose_peak(self):
        self.fftdata = np.fft.fftshift(np.fft.fft2(self.topo))
        self.fftdata = np.log10(np.abs(self.fftdata) ** 2)
        self.ui = Ui_Form_bragg(self.fftdata)
        self.ui.exec_()


    def openjavabinfile(self):
        self.filename,_ =QFileDialog.getOpenFileName(self.centralwidget,'openfile','C:\\data','binfile(*.bin)')
        #self.topo=read_java_bin.read_java_bin_file(self.filename)
        self.topo,self.Newbinpath = javabin.read_java_bin_single_layer(self.filename)
        #self.topo = fieldops.subtractMeanPlane(self.topo)
        self.topomap_draw()

    def fourier_draw(self,fftdata):
        self.ax.clear()
        self.ax.axis('on')
        self.ax.pcolormesh(fftdata,cmap=plt.get_cmap(self.cmap))
        self.canvas.draw()
    def topomap_draw(self):
        self.ax.clear()
        self.ax.axis('on')
        self.ax.pcolormesh(self.topo,cmap=plt.get_cmap(self.cmap))
        self.canvas.draw()
    def topomap_draw_2(self,vmin,vmax):
        self.vmin = np.percentile(self.topo,vmin)
        self.vmax = np.percentile(self.topo,vmax)
        self.ax.clear()
        self.ax.axis('on')
        self.ax.pcolormesh(self.topo,vmin = self.vmin,vmax=self.vmax,cmap=plt.get_cmap(self.cmap))
        self.canvas.draw()

    def openpythonbinfile(self):
        self.filename, _ = QFileDialog.getOpenFileName(self.centralwidget,'openfile','C:\\data','binfile(*.bin)')
        self.topo, self.Newbinpath = wrb.read_bin(self.filename)
        #self.topo = fieldops.subtractMeanPlane(self.topo)
        #self.topo = fieldops.detectNaN(self.topo)
        self.topomap_draw()

    def fouriertransform(self):
        if self.fft_count%2 ==0:
            self.fftdata = np.fft.fft2(self.topo)
            self.fftdata = np.log10(np.abs(np.fft.fftshift(self.fftdata))**2)
            self.fourier_draw(self.fftdata)
        elif self.fft_count%2 == 1:
            self.topomap_draw()
        self.fft_count = self.fft_count + 1
    def choose_impurity(self):
        self.windows = Ui_Form_impurity(self.topo)
        self.windows.exec_()


    def driftcorrection(self):
        self.Point_1_raw = []
        self.Point_2_raw = []
        #这是我们选取的两个点

        for i in list(self.ui.datas.keys()):
            self.Point_1_raw.append(self.ui.datas[i][0])
            self.Point_2_raw.append(self.ui.datas[i][1])
        bragg_1,bragg_2 = fp.get_refine_bragg_point(self.fftdata,self.Point_1_raw,self.Point_2_raw)
        self.bragg_peak = np.empty((2,2))
        self.bragg_peak[0] = bragg_1
        self.bragg_peak[1] = bragg_2
        self.calc = UFiedlCalculation.UFieldCalculationReal(False,self.topo,60,self.bragg_peak,13,True)
        self.calc.doExpUCalc()
        self.calc.pickBestlayer()
        self.calc.makeBestUfield()
        self.calc.doRegularization()
        self.calc.addReglarization()
        self.calc.applyUfield()
        #self.m = ms.Plotcanvas(self.graphicsView, width=10, height=10, topo=self.calc.after,)
        self.topomap_draw()


    def cutfigure(self):
        self.windows = Ui_Form_Cut(self.topo)
        self.windows.exec_()
        new_topo = self.topo[int(self.windows.YPoint[1]):int(self.windows.YPoint[0]):1,int(self.windows.XPoint[0]):int(self.windows.XPoint[1]):1]
        print(np.shape(new_topo))
        print(self.windows.XPoint)
        print(self.windows.YPoint)
        self.topo = new_topo
        self.topomap_draw()


    def changecolor(self):
        self.color_count =self.color_count+1
        time = int(self.color_count%len(self.cmaplist))
        self.cmap = self.cmaplist[time]
        self.topomap_draw()


    def dialog_open(self):
        """
        items = ('raw','subtract best-fit line from horizontal lines','subtract best-fit line from horizontal lines','Nomalize to the range [0,1]',
                 'suppress bad pixels','subtract linear fit','subtract plane fit')
        item,ok =  QInputDialog.getItem(self.centralwidget,'scan correction','fit list',items,0,False)
        if ok and item:
            if item == 'raw':
                self.topo = self.topo
                print("形貌图保持不变")
            elif item == 'subtract plane fit':
                self.topo = fieldops.subtractMeanPlane(self.topo)
                print("形貌图planefit")
            elif item ==  'suppress bad pixels':
                self.topo = fieldops.detectNaN(self.topo)

        """
        self.topo = dialog_function(self.centralwidget,self.topo)
        self.topomap_draw()
    def linecuts(self):
        self.Windows = Ui_Form_linecut(self.topo)
        self.Windows.exec_()
    def actiondrawlinefunction(self):
        self.windows = Ui_Form(self.topo)#Baseui()
        self.windows.show()
    """
    @pyqtSlot()
    def KeyPressEvent(self,event):
        self.cmaplist = ['viridis', 'plasma', 'inferno', 'magma', 'cividis', 'Greys', 'Purples', 'Blues', 'Greens',
                         'Oranges', 'Reds',
                         'YlOrBr', 'YlOrRd', 'OrRd', 'PuRd', 'RdPu', 'BuPu', 'GnBu', 'PuBu', 'YlGnBu', 'PuBuGn', 'BuGn',
                         'YlGn']
        count =0
        super().KeyPressEvent(event)
        print(event.key())
        if event.key() ==QtCore.Qt.Key_C:
            count =count+1
            number = int(count%23)
            self.cmap = self.cmaplist[number]
            print("nihao")
    """


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.menu.setTitle(_translate("MainWindow", "open_file"))
        self.menu_2.setTitle(_translate("MainWindow", "Choose"))
        self.menu_3.setTitle(_translate("MainWindow", "Phase Reference QPI"))
        self.menu_4.setTitle(_translate("MainWindow", "drift_correction"))
        self.menu_5.setTitle(_translate("MainWindow",'cut_picture'))
        self.menu_6.setTitle(_translate("MainWindow",'linecut'))
        self.actionchoose_color.setText(_translate("MainWindow", "choose color"))
        self.actionopen3ds.setText(_translate("MainWindow", "open3ds"))
        self.actionopenpythonbin.setText(_translate("MainWindow", "openpythonbin"))
        self.actionopenjavabin.setText(_translate("MainWindow","openjavabin"))
        self.actionochooseimpurities.setText(_translate("MainWindow", "choose_impurities"))
        self.actionoaddmask.setText(_translate("MainWindow", "addmask"))
        self.actionochooseBraggPeak.setText(_translate("MainWindow", "chooseBraggPeak"))
        self.actionoDoingDrfitCorrection.setText(_translate("MainWindow","DriftCorrection"))
        self.actioncutfigure.setText(_translate("MainWindow","cutfigure"))
        self.actionlincut.setText(_translate("MainWindow",'choose two point '))
        self.actiondrawfunction.setText(_translate("MainWindow",'绘制linecut'))



if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
