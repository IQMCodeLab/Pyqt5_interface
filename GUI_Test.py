# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'GUI1.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import numpy as np
import binaryfile_read_write as wrb
import open3ds as op
import filops as fp
import read_java_bin
import MouseConnect as ms
from PyQt5 import QtCore, QtGui, QtWidgets
import MouseConnect as mouse
from PyQt5.QtWidgets import QDialog, QApplication, QColorDialog,QLineEdit,QAction
from PyQt5.QtGui import QColor
from PyQt5.QtWidgets import QFileDialog
#from GUI2 import Ui_Form
import pandas as pg
from pyqtgraph import PlotWidget, plot
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.Qt import Qt
from PyQt5 import QtCore, QtGui, QtWidgets
import UFiedlCalculation
from GUI4 import Ui_Form_bragg,Ui_Form_impurity
import filops as fp
from matplotlib.figure import Figure
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas

"""
class Ui_Form(object):
    def setupUi(self, Form, data):
        Form.setObjectName("Form")
        Form.resize(874, 726)
        self.data = data
        self.horizontalLayout = QtWidgets.QHBoxLayout(Form)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.graphicsView = QtWidgets.QGraphicsView(Form)
        self.graphicsView.setObjectName("graphicsView")
        self.horizontalLayout.addWidget(self.graphicsView)
        self.cmap ='binary'
        m = ms.Plotcanvas_With_Mouse(self.graphicsView, width=15, height=15, topo=self.data,cmap=self.cmap)
        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def KeyPressEvent(self,event):
        self.cmaplist = ['viridis', 'plasma', 'inferno', 'magma', 'cividis', 'Greys', 'Purples', 'Blues', 'Greens',
                         'Oranges', 'Reds',
                         'YlOrBr', 'YlOrRd', 'OrRd', 'PuRd', 'RdPu', 'BuPu', 'GnBu', 'PuBu', 'YlGnBu', 'PuBuGn', 'BuGn',
                         'YlGn']
        count =0
        if event.key() ==QtCore.Qt.Key_Enter:
            count =count+1
            number = int(count%23)
            self.cmap = self.cmaplist[number]

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
"""

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(805, 709)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.width = 10
        self.height =8
        self.dpi=100
        self.figure= Figure(figsize=(self.width,self.height),dpi=self.dpi)
        self.canvas = FigureCanvas(self.figure)
        self.ax =self.figure.add_subplot(111)
        self.canvas.draw()
        #self.graphicsView = QtWidgets.QGraphicsView(self.centralwidget)
        #self.graphicsView.setObjectName("graphicsView")

        self.verticalLayout.addWidget(self.canvas)
        #这两行可以更改
        MainWindow.setCentralWidget(self.centralwidget)

        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 805, 20))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        self.menu_2 = QtWidgets.QMenu(self.menubar)
        self.menu_2.setObjectName("menu_2")
        self.menu_3 = QtWidgets.QMenu(self.menubar)
        self.menu_3.setObjectName("menu_3")
        self.menu_4 = QtWidgets.QMenu(self.menubar)
        self.menu_4.setObjectName("drift_correction")
        self.menu_5 = QtWidgets.QMenu(self.menubar)
        self.menu_5.setObjectName("图形处理")


        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionchoose_color = QtWidgets.QAction(MainWindow)
        self.actionchoose_color.setObjectName("actionchoose_color")

        self.actionopen3ds = QtWidgets.QAction(MainWindow)
        self.actionopen3ds.setObjectName("actionopen3ds")
        self.actionopenpythonbin = QtWidgets.QAction(MainWindow)
        self.actionopenpythonbin.setObjectName("actionopenpythonbin")
        self.actionopenjavabin = QtWidgets.QAction(MainWindow)
        self.actionopenjavabin.setObjectName("actionopenjavabin")

        self.actionochooseimpurities = QtWidgets.QAction(MainWindow)
        self.actionochooseimpurities.setObjectName("choose_impurities")
        self.actionoaddmask = QtWidgets.QAction(MainWindow)
        self.actionoaddmask.setObjectName("add_mask")

        self.actionochooseBraggPeak = QtWidgets.QAction(MainWindow)
        self.actionochooseBraggPeak.setObjectName("chooseBraggPeak")
        self.actionoDoingDrfitCorrection=QtWidgets.QAction(MainWindow)
        self.actionoDoingDrfitCorrection.setObjectName("DriftCorrection")


        self.menu.addAction(self.actionopen3ds)
        self.menu.addAction(self.actionopenpythonbin)
        self.menu.addAction(self.actionopenjavabin)

        self.menu_2.addAction(self.actionchoose_color)

        self.menu_3.addAction(self.actionochooseimpurities)
        self.menu_3.addAction(self.actionoaddmask)

        self.menu_4.addAction(self.actionochooseBraggPeak)
        self.menu_4.addAction(self.actionoDoingDrfitCorrection)

        self.menubar.addAction(self.menu.menuAction())
        self.menubar.addAction(self.menu_2.menuAction())
        self.menubar.addAction(self.menu_3.menuAction())
        self.menubar.addAction(self.menu_4.menuAction())
        self.menubar.addAction(self.menu_5.menuAction())


        self.actionchoose_color.triggered.connect(self.choosecolor)
        self.actionopen3ds.triggered.connect(self.open3ds_or_sxm)
        self.actionopenpythonbin.triggered.connect(self.openpythonbinfile)
        self.actionopenjavabin.triggered.connect(self.openjavabinfile)
        self.actionochooseimpurities.triggered.connect(self.choose_impurity)
        self.actionochooseBraggPeak.triggered.connect(self.choose_peak)
        self.actionoDoingDrfitCorrection.triggered.connect(self.driftcorrection)


        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def choosecolor(self):
        self.color = QColorDialog.getColor()

    def open3ds_or_sxm(self):
        self.filename, _ = QFileDialog.getOpenFileName()
        self.Newpath = op.openup(self.filename)
        print(self.Newpath)

    def choose_peak(self):
        self.fftdata = np.fft.fftshift(np.fft.fft2(self.topo))
        self.fftdata = np.log10(np.abs(self.fftdata) ** 2)
        self.windows = QtWidgets.QWidget()
        self.ui = Ui_Form_bragg()
        self.ui.setupUi(self.windows, self.fftdata)
        self.windows.show()
    def openjavabinfile(self):
        self.filename,_ =QFileDialog.getOpenFileName(filter='(*.bin)')
        self.topo=read_java_bin.read_java_bin_file(self.filename)
        self.ax.pcolormesh(self.topo)
        self.canvas.show()


    def openpythonbinfile(self):
        self.filename, _ = QFileDialog.getOpenFileName(filter='(*.bin)')
        self.topo, self.Newbinpath = wrb.read_bin(self.filename)
        self.cmap ='binary'
        self.ax.pcolormesh(self.topo,cmap=self.cmap)
        self.canvas.draw()
    def choose_impurity(self):
        self.windows = QtWidgets.QWidget()
        self.ui = Ui_Form_impurity()
        self.ui.setupUi(self.windows, self.topo)
        self.windows.show()
    def driftcorrection(self):
        print("你好")
        self.Point_1_raw = []
        self.Point_2_raw = []
        #这是我们选取的两个点

        for i in list(self.ui.datas.keys()):
            self.Point_1_raw.append(self.ui.datas[i][0])
            self.Point_2_raw.append(self.ui.datas[i][1])
        bragg_1,bragg_2 = fp.get_refine_bragg_point(self.fftdata,self.Point_1_raw,self.Point_2_raw)
        self.bragg_peak = np.empty((2,2))
        self.bragg_peak[0] = bragg_1
        self.bragg_peak[1] = bragg_2
        self.calc = UFiedlCalculation.UFieldCalculationReal(False,self.topo,90,self.bragg_peak,13,True)
        self.calc.doExpUCalc()
        self.calc.pickBestlayer()
        self.calc.makeBestUfield()
        self.calc.doRegularization()
        self.calc.addReglarization()
        self.calc.applyUfield()
        #self.m = ms.Plotcanvas(self.graphicsView, width=10, height=10, topo=self.calc.after,)
        self.ax.pcolormesh(self.calc.after,cmap=self.cmap)
        self.canvas.draw()
    """
    def KeyPressEvent(self,event):
        self.cmaplist = ['viridis', 'plasma', 'inferno', 'magma', 'cividis', 'Greys', 'Purples', 'Blues', 'Greens',
                         'Oranges', 'Reds',
                         'YlOrBr', 'YlOrRd', 'OrRd', 'PuRd', 'RdPu', 'BuPu', 'GnBu', 'PuBu', 'YlGnBu', 'PuBuGn', 'BuGn',
                         'YlGn']
        count =0
        super().KeyPressEvent(event)
        print(event.key())
        if event.key() ==QtCore.Qt.Key_C:
            count =count+1
            number = int(count%23)
            self.cmap = self.cmaplist[number]
    """
    def keyPressEvent(self, event):
        if event.key() == Qt.Key_Escape:
            print("closed")


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.menu.setTitle(_translate("MainWindow", "打开文件"))
        self.menu_2.setTitle(_translate("MainWindow", "调节颜色"))
        self.menu_3.setTitle(_translate("MainWindow", "相位敏感QPI"))
        self.menu_4.setTitle(_translate("MainWindow", "矫正"))
        self.menu_5.setTitle(_translate("MainWindow",'图片裁剪'))
        self.actionchoose_color.setText(_translate("MainWindow", "choose color"))
        self.actionopen3ds.setText(_translate("MainWindow", "open3ds"))
        self.actionopenpythonbin.setText(_translate("MainWindow", "openpythonbin"))
        self.actionopenjavabin.setText(_translate("MainWindow","openjavabin"))
        self.actionochooseimpurities.setText(_translate("MainWindow", "choose_impurities"))
        self.actionoaddmask.setText(_translate("MainWindow", "addmask"))
        self.actionochooseBraggPeak.setText(_translate("MainWindow", "chooseBraggPeak"))
        self.actionoDoingDrfitCorrection.setText(_translate("MainWindow","DriftCorrection"))


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
